{"version":3,"file":"static/js/82.266a6369.chunk.js","mappings":"yOA4DA,EAvDqB,WAAO,IAAD,IAEfA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,gBAAnB,QAA+B,KAEjDC,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,IAAoBV,GACfW,KAAKP,EACb,GAAE,CAACJ,IAEJ,IAAQY,EAAuDT,EAAvDS,MAAOC,EAAgDV,EAAhDU,YAAaC,EAAmCX,EAAnCW,SAAUC,EAAyBZ,EAAzBY,OAAQC,EAAiBb,EAAjBa,aAE9C,OACI,iBAAKC,UAAU,2BAAf,WACI,SAAC,KAAD,CAASC,GAAIb,EAAb,sBACA,iBAAKY,UAAU,sBAAf,WACI,gBAAKA,UAAU,kCAAf,SACKJ,IACG,gBACAI,UAAU,qBACVE,IAAG,8CAAyCN,GAC5CO,MAAM,MACNC,IAAKT,OAEb,iBAAKK,UAAU,gCAAf,WACI,eAAIA,UAAU,4BAAd,SAA2CL,KAC3C,eAAGK,UAAU,2BAAb,yBAAqDK,KAAKC,MAAOP,EAAe,GAAM,KAAtF,QACA,eAAIC,UAAU,4BAAd,uBACA,cAAGA,UAAU,2BAAb,SAAyCH,KACzC,eAAIG,UAAU,4BAAd,qBACA,wBACKF,GAAUA,EAAOS,KAAI,SAACC,GAAD,OAClB,yBACI,uBAAIA,EAAMC,QADLD,EAAME,GADG,aAQlC,4BACI,eAAIV,UAAU,0DAAd,qCACA,gBAAIA,UAAU,gCAAd,WACI,yBAAI,SAAC,KAAD,CAASC,GAAE,OAAUX,MAAOP,EAA5B,qBACJ,yBAAI,SAAC,KAAD,CAASkB,GAAE,UAAaX,MAAOP,EAA/B,2BAER,SAAC,EAAA4B,SAAD,CAAUC,UAAU,6CAApB,UACI,SAAC,KAAD,WAKnB,C,mKCxDKC,EAAQ,gCACRC,EAAO,2CAEN,SAASC,IACZ,IACI,OAAOC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,8BAA2CC,IAC7CpB,MAAK,SAAAuB,GACF,OAAOA,EAAIC,IACd,GAGR,CAFC,MAAOC,GACLC,QAAQC,IAAIF,EACf,CACJ,CAEM,SAAS1B,EAAoBiB,GAChC,IACI,OAAOM,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BH,EAA9B,YAAoCI,IACtCpB,MAAK,SAAAuB,GACF,OAAOA,EAAIC,IAClB,GAGJ,CAFC,MAAOC,GACLC,QAAQC,IAAIF,EACf,CACJ,CAEM,SAASG,EAAiBZ,GAC7B,IACI,OAAOM,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BH,EAA9B,oBAA4CI,IAC9CpB,MAAK,SAAAuB,GACF,OAAOA,EAAIC,KAAKK,IACvB,GAGJ,CAFC,MAAOJ,GACLC,QAAQC,IAAIF,EACf,CACJ,CAEM,SAASK,EAAoBd,GAChC,IACI,OAAOM,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BH,EAA9B,oBAA4CI,IAC9CpB,MAAK,SAAAuB,GACF,OAAOA,EAAIC,KAAKO,OACvB,GAGJ,CAFC,MAAON,GACLC,QAAQC,IAAIF,EACf,CACJ,CAEM,SAASO,EAAmBC,GAC/B,IACI,OAAOX,EAAAA,EAAAA,IAAA,UAAaH,EAAb,8BAA2Cc,EAA3C,mBAAuDb,IACzDpB,MAAK,SAAAuB,GACF,OAAIA,EAAIC,KAAKO,QAAQG,OAAS,EACnBX,EAAIC,KAAKO,QAEbI,MAAM,aACpB,GAGJ,CAFC,MAAOV,GACLC,QAAQC,IAAIF,EACf,CACJ,C","sources":["components/MovieDetails/MovieDetails.js","services/MovieDatabaseApi.js"],"sourcesContent":["import { NavLink, Outlet, useLocation, useParams } from 'react-router-dom'\nimport { useState, useEffect, Suspense } from 'react'\nimport { getMovieDetailsById } from '../../services/MovieDatabaseApi'\nimport './MovieDetails.css'\n\nconst MovieDetails = () => {\n\n    const { movieId } = useParams()\n    const [movie, setMovie] = useState([])\n    const location = useLocation()\n    const backLinkHref = location.state?.location ?? '/'\n\n    useEffect(() => {\n        getMovieDetailsById(movieId)\n            .then(setMovie)\n    }, [movieId])\n\n    const { title, poster_path, overview, genres, vote_average } = movie\n\n    return (\n        <div className='movie-details__container'>\n            <NavLink to={backLinkHref}>Go Back</NavLink>\n            <div className='movie-details__info'>\n                <div className='movie-details__poster-container'>\n                    {poster_path &&\n                        <img\n                        className='movie-details__img' \n                        src={`https://image.tmdb.org/t/p/original/${poster_path}`} \n                        width='300' \n                        alt={title} />}\n                </div>\n                <div className='movie-details__info-container'>\n                    <h2 className='movie-details__info-title'>{title}</h2>\n                    <p className='movie-details__info-page'>User Score: {Math.round((vote_average / 10) * 100)}%</p>\n                    <h2 className='movie-details__info-title'>Overview</h2>\n                    <p className='movie-details__info-page'>{overview}</p>\n                    <h2 className='movie-details__info-title'>Genres</h2>\n                    <ul>\n                        {genres && genres.map((genre) => (\n                            <li key={genre.id}>\n                                <p>{genre.name}</p>\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            </div>\n            <div>\n                <h2 className='movie-details__info-title movie-details__add-info-title'>Additional Information</h2>\n                <ul className='movie-details__more-info-list'>\n                    <li><NavLink to={`cast`} state={movieId}>Cast</NavLink></li>\n                    <li><NavLink to={`reviews`} state={movieId}>Reviews</NavLink></li>\n                </ul>\n                <Suspense fallback={<div>Loading page...</div>}>\n                    <Outlet />\n                </Suspense>\n            </div>\n        </div>\n    )\n}\n\nexport default MovieDetails","import axios from 'axios';\n\nconst BASE_URL = `https://api.themoviedb.org/3/`\nconst API_KEY = `api_key=b87c06507a636c850d5a0bd93afe2f26`\n\nexport function getTrendingMovies() {\n    try {\n        return axios.get(`${BASE_URL}trending/movie/day?${API_KEY}`)\n            .then(res => {\n                return res.data\n            })\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport function getMovieDetailsById(id) {\n    try {\n        return axios.get(`${BASE_URL}movie/${id}?${API_KEY}`)\n            .then(res => {\n                return res.data\n        })\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport function getMovieCastById(id) {\n    try {\n        return axios.get(`${BASE_URL}movie/${id}/credits?${API_KEY}`)\n            .then(res => {\n                return res.data.cast\n        })\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport function getMovieReviewsById(id) {\n    try {\n        return axios.get(`${BASE_URL}movie/${id}/reviews?${API_KEY}`)\n            .then(res => {\n                return res.data.results\n        })\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport function searchMoviesByName(q) {\n    try {\n        return axios.get(`${BASE_URL}search/movie?query=${q}&page=1&${API_KEY}`)\n            .then(res => {\n                if (res.data.results.length > 0) {\n                    return res.data.results\n                }\n                return alert('No results')\n        })\n    } catch (error) {\n        console.log(error);\n    }\n}"],"names":["movieId","useParams","useState","movie","setMovie","backLinkHref","useLocation","state","location","useEffect","getMovieDetailsById","then","title","poster_path","overview","genres","vote_average","className","to","src","width","alt","Math","round","map","genre","name","id","Suspense","fallback","BASE_URL","API_KEY","getTrendingMovies","axios","res","data","error","console","log","getMovieCastById","cast","getMovieReviewsById","results","searchMoviesByName","q","length","alert"],"sourceRoot":""}